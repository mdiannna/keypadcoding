typedef struct sensor_t {
  float (*get) (void);
  char paramName[20];
  char unitName[10];
} sensorType;

enum { SENSOR_TEMP,SENSOR_GAS,SENSOR_PIR,SENSOR_FS,SENZOR_US,SENSOR_TILT, SENSOR_NR_OF };

#include <Keypad.h>
void InitSerial(){
Serial.begin(9600);
}

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {5, 4, 3, 2}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {9, 8, 7, 6}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );


char KeyToChar(unsigned char key) {

	switch (key) {

	case 0xEE:		return '1';  
	case 0xED:		return '2';
	case 0xEB:		return '3';
	case 0xE7:           return '/n';
	
	case 0xDE:		return '4';
	case 0xDD:		return '5';
	case 0xDB:		return '6';
	case 0xD7:           return '/r';
	
	case 0xBE:		return '7';
	case 0xBD:		return '8';
	case 0xBB:		return '9';
	case 0xB7:           return '3';
	
	case 0x7E:   	       return '8';
	case 0x7D:		return '5';
	case 0x7B:		return '1';
	case 0x77:           return '4';
	default:		return 0;

	}}


//config Leds
//#define LEDR_PIN 1
//#define LEDG_PIN 0

//void InitLEDS(){
  //pinMode(LEDR_PIN, OUTPUT);
//  pinMode(LEDG_PIN, OUTPUT);}

//configurarea senzorul de temperatura//
#define TMP36_PIN A0
// ADC range
#define ADC_MIN 0
#define ADC_MAX 1023
// Voltage range
#define VOLT_MIN 0
#define VOLT_MAX 5
// Temperature range
#define TEMP_MIN -40
#define TEMP_MAX 125
  
  
void InitTemperature() {
  pinMode(TMP36_PIN, INPUT);
}
   
float GetTemperature(void) {
 
  int val = analogRead(TMP36_PIN);
  float celsius = map(((val - 20) * 3.04), ADC_MIN, ADC_MAX, TEMP_MIN, TEMP_MAX);
  return celsius;
  
}
//configurarea senzorului de gas
#define GasS_PIN A1
void InitGS() 

{
  pinMode(GasS_PIN, INPUT);
}
float GetSignal(void){
int val1 = analogRead(GasS_PIN);
return val1;
}
//config senzor infrarosu
#define PIR_PIN 13
void InitPIR()
{pinMode(PIR_PIN, INPUT);
}
float GetPIR(void)
{int val2 = digitalRead(PIR_PIN);
 return val2;}
//configurare senzor ultrasonic


//config senzorului fotosensibil
#define FS_PIN A2
#define LIGHT_MIN 10
#define LIGHT_MAX 100
#define ADC_MIN 0
#define ADC_MAX 1023
#define VOLT_MIN 0
#define VOLT_MAX 5
void InitFS()
{
  pinMode(FS_PIN,INPUT);
}
float GetFS(void) {
  int val4 = analogRead(FS_PIN);
  float voltaj = map(val4, ADC_MIN, ADC_MAX, VOLT_MIN, VOLT_MAX);
  float lumina = map(voltaj, VOLT_MIN, VOLT_MAX, LIGHT_MIN, LIGHT_MAX);
  return lumina;
}
//config senzorului ultrasunet
#define TRIG_PIN 12
#define ECHO_PIN 11

long duration;
int distanta;

void InitUS(void) {
  pinMode(TRIG_PIN, OUTPUT); 
  pinMode(ECHO_PIN, INPUT); 
}

float GetUS() {
  
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH);
  distanta = duration*0.034/2;
  return distanta;
}
//config tilt sensor
#define PIN_T 10
#define FS_PIN A2
#define T1_MIN 10
#define T2_MAX 100
#define ADC_MIN 0
#define ADC_MAX 1023
void InitT(){
  pinMode(PIN_T, INPUT);}
float GetT(void){
  float val5 = digitalRead(PIN_T);
  float rot = map(val5,T1_MIN,T2_MAX,ADC_MIN,ADC_MAX) ;
  return rot;}

sensorType sensorList[SENSOR_NR_OF] = {
  {
    GetTemperature,
    "Temperature", 
    "celsius"
  },
  { GetSignal,
   "Concentratia",
     "nivelul"
  },
    
  { GetPIR,
   "Miscare",
     "Da/Nu"},
 
  { GetFS,
   "Luminare", 
     "lucsi"
  },
  { GetUS,
    "Distanta",
   "cm" 
  },
  { GetT,
   "Motion",
   "l/r"}
 };

float SensorGetValue(int id) {
    if(id < SENSOR_NR_OF) {
      return sensorList[id].get();
    }
}

char * SensorGetUnit(int id) {
    if(id < SENSOR_NR_OF) {
      return sensorList[id].unitName;
    }
}

char * SensorGetParamName(int id) {
    if(id < SENSOR_NR_OF) {
      return sensorList[id].paramName;
    }
}


void setup() {
  InitSerial();
  InitTemperature();
  InitGS();
  InitPIR();
  InitFS();
  InitUS();
  InitT(); 
  
}

void loop() {
  
  int i = 0;

  char key = keypad.getKey();



  if(key=='1') {
    i = SENSOR_TEMP;
  }
  if(key=='2') {
    i = SENSOR_GAS;
  }
  if(key=='3') {
    i = SENSOR_PIR;
  }
  if(key=='4') {
    i = SENSOR_FS;
  }
    if(key=='5') {
    i = SENZOR_US;
  }

  if(key=='6') {
    i = SENSOR_TILT;
  }


  // for(int i=0; i<SENSOR_NR_OF; i++) {
    char * paramName = SensorGetParamName(i);
    Serial.print(paramName);
    Serial.print(": ");
    
    float value = SensorGetValue(i);  
    Serial.print(value);

    char * unit = SensorGetUnit(i);
    Serial.print(" ");
    Serial.print(unit);
    Serial.print(" , ");
    Serial.println();
  // }
  Serial.println();
  delay(2000);
  
  
  
}
